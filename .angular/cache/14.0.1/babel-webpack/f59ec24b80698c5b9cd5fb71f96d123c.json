{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ConfigService = /*#__PURE__*/(() => {\n  class ConfigService {\n    constructor(httpHandler) {\n      this.httpHandler = httpHandler; // tslint:disable-next-line:ban-types\n\n      this.config = null; // tslint:disable-next-line:ban-types\n\n      this.env = null;\n      this.http = null;\n      this.http = new HttpClient(httpHandler);\n    } // tslint:disable-next-line:typedef\n\n\n    getConfig(key) {\n      return this.config[key];\n    } // tslint:disable-next-line:typedef\n\n\n    getEnv(key) {\n      return this.env[key];\n    } // tslint:disable-next-line:typedef\n\n\n    load() {\n      const jsonFile = `assets/config/${environment.name}.json`; // '/assets/config/env.json'\n\n      return new Promise((resolve, reject) => {\n        this.http.get(jsonFile).pipe(catchError(error => {\n          console.log('Configuration file \"env.json\" could not be read');\n          resolve(true); // tslint:disable-next-line: deprecation\n\n          return throwError(error.json().error || 'Server error');\n        })).subscribe(envResponse => {\n          this.env = envResponse;\n          let request = null;\n\n          switch (envResponse.env) {\n            case 'deploy':\n              {\n                request = this.http.get('/assets/config/config.' + envResponse.env + '.json');\n              }\n              break;\n\n            case 'dev':\n              {\n                request = this.http.get('/assets/config/config.' + envResponse.env + '.json');\n              }\n              break;\n\n            case 'default':\n              {\n                console.error('Environment file is not set or invalid');\n                resolve(true);\n              }\n              break;\n          }\n\n          if (request) {\n            request.pipe(catchError(error => {\n              console.error('Error reading ' + envResponse.env + ' configuration file');\n              resolve(error); // tslint:disable-next-line: deprecation\n\n              return throwError(error.json().error || 'Server error');\n            })).subscribe(responseData => {\n              this.config = responseData;\n              resolve(true);\n            });\n          } else {\n            console.error('Env config file \"env.json\" is not valid');\n            resolve(true);\n          }\n        });\n      });\n    }\n\n  }\n\n  ConfigService.ɵfac = function ConfigService_Factory(t) {\n    return new (t || ConfigService)(i0.ɵɵinject(i1.HttpBackend));\n  };\n\n  ConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConfigService,\n    factory: ConfigService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConfigService;\n})();","map":null,"metadata":{},"sourceType":"module"}